; Copyright (C) 2025 dgelessus
; 
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

; Simple test for cartridge-based code that can coexist with Cody BASIC.
; The code that will be loaded into memory consists of two parts.
; The first part is run by the loader at boot,
; but only displays a message and then returns to BASIC.
; The second part is not run at boot,
; but left in memory at a known fixed address
; so that it can be called from BASIC using SYS.

; This is similar to the resident.asm example from the official cody-computer repo.
; (In fact,
; this test program was originally a hacky proof of concept
; written before the Cody ROM officially supported cartridges returning to BASIC.)

screen_ram = $c400 ; Default base address of screen memory

; Cody ROM/BASIC zero page variables
* = $00
; These three variables are always overwritten by Cody BASIC after a SYS call returns,
; so it's safe to use them as temporary variables inside a SYS call.
.byte ? ; temp_a
temp_x: .byte ?
temp_y: .byte ?
* = $06
jiffies: .word ?

; Display duration for the boot message,
; in jiffies (1/60ths of a second).
; Some digital displays take around 2 seconds to sync to the Cody Computer's analog video signal,
; so this still leaves around 2 seconds to read the message.
BOOT_MESSAGE_DISPLAY_TIME = 4*60

; BASIC program memory goes from $0200 up to $6500
; and is used roughly from the bottom up
; depending on the size of the currently loaded BASIC code.
; Thus, it's usually safe to put custom code/data here,
; as long as the BASIC program is not so large that it needs the entire program memory.
LOAD_POSITION = $6300
PERSISTENT_CODE_POSITION = $6400 ; decimal 25600
PERSISTENT_CODE_MAX = $6600

; Program header for Cody BASIC's loader (needs to be first).
* = 0
.word LOAD_POSITION ; Starting address
.word (LOAD_END - 1) ; Ending address

; Cody BASIC's loader will put the data at LOAD_POSITION.
.logical LOAD_POSITION
	ldx #0
_print_loop:
	lda BOOT_MESSAGE, x
	beq _print_done
	sta screen_ram, x
	inc x
	bra _print_loop
_print_done:
	
	; Store the current timer value.
	lda jiffies
	sta temp_x
	lda jiffies+1
	sta temp_y
	
	; Ensure that interrupts are enabled
	; so that the jiffies variable gets updated by the Cody ROM/BASIC ISR.
	cli
	
_idle_loop:
	; Calculate how many jiffies have elapsed since the timer value was saved.
	sec
	lda jiffies
	sbc temp_x
	tax
	lda jiffies+1
	sbc temp_y
	
	; Continue looping as long as the elapsed time is less than the desired display time.
	cmp #>BOOT_MESSAGE_DISPLAY_TIME
	bcc _idle_loop
	cpx #<BOOT_MESSAGE_DISPLAY_TIME
	bcc _idle_loop
	
	sei
	rts

BOOT_MESSAGE: .text format("Persistent code loaded. Call SYS %d", test_call)

.cerror * > PERSISTENT_CODE_POSITION, format("Boot code too long: %#04x > %04x", *, PERSISTENT_CODE_POSITION)
* = PERSISTENT_CODE_POSITION

test_call:
	lda #12
	ldx #34
	ldy #56
	rts

.cerror * > PERSISTENT_CODE_MAX, format("Persistent code too long: %04x > %04x", *, PERSISTENT_CODE_MAX)

LOAD_END:
.endlogical
