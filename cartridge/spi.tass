; Copyright (C) 2025 dgelessus
; 
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

; Some SPI functions that can be called from BASIC.
; Very unfinished - currently only has one function that checks whether a cartridge is present.

; VIA registers
via_iorb = $9f00 ; IO register B
via_iora = $9f01 ; IO register A
via_ddrb = $9f02 ; Data direction register B
via_acr = $9f0b ; Auxiliary control register
via_pcr = $9f0c ; Peripheral control register
via_ifr = $9f0d ; Interrupt flag register
via_ier = $9f0e ; Interrupt enable register

; via_acr latch flags
VIA_ACR_PA_LATCH = %1 << 0
VIA_ACR_PB_LATCH = %1 << 1

; via_acr shift register control flags
VIA_ACR_SR_OFF = %000 << 2
VIA_ACR_SR_IN_T2 = %001 << 2
VIA_ACR_SR_IN_PHI2 = %010 << 2
VIA_ACR_SR_IN_CB1 = %011 << 2
VIA_ACR_SR_OUT_T2_FREE_RUNNING = %100 << 2
VIA_ACR_SR_OUT_T2 = %101 << 2
VIA_ACR_SR_OUT_PHI2 = %110 << 2
VIA_ACR_SR_OUT_CB1 = %111 << 2

; via_acr T2 control flags
VIA_ACR_T2_ONE_SHOT = %0 << 5
VIA_ACR_T2_COUNT_DOWN_ON_PB6 = %1 << 5

; via_acr T1 control flags
VIA_ACR_T1_OUTPUT_ON_PB7 = %1 << 6
VIA_ACR_T1_ONE_SHOT = %0 << 7
VIA_ACR_T1_CONTINUOUS = %1 << 7

; via_pcr flag shifts for CA and CB
VIA_PCR_CA_SHIFT = 0 ; CA1/CA2
VIA_PCR_CB_SHIFT = 4 ; CB1/CB2

; via_pcr flags, must be shifted by above constants
VIA_PCR_C1_IN_NEGATIVE_ACTIVE_EDGE = %0 << 0
VIA_PCR_C1_IN_POSITIVE_ACTIVE_EDGE = %1 << 0
VIA_PCR_C2_IN_NEGATIVE_ACTIVE_EDGE = %000 << 1
VIA_PCR_C2_IN_INDEPENDENT_NEGATIVE_ACTIVE_EDGE = %001 << 1
VIA_PCR_C2_IN_POSITIVE_ACTIVE_EDGE = %010 << 1
VIA_PCR_C2_IN_INDEPENDENT_POSITIVE_ACTIVE_EDGE = %011 << 1
VIA_PCR_C2_OUT_HANDSHAKE = %100 << 1
VIA_PCR_C2_OUT_PULSE = %101 << 1
VIA_PCR_C2_OUT_LOW = %110 << 1
VIA_PCR_C2_OUT_HIGH = %111 << 1

; via_ifr/via_ier flags
VIA_IR_CA2 = %1 << 0
VIA_IR_CA1 = %1 << 1
VIA_IR_SR = %1 << 2
VIA_IR_CB2 = %1 << 3
VIA_IR_CB1 = %1 << 4
VIA_IR_T2 = %1 << 5
VIA_IR_T1 = %1 << 6
VIA_IFR_IRQ = %1 << 7
VIA_IER_CLEAR = %0 << 7
VIA_IER_SET = %1 << 7

; SPI IO lines connected to VIA port B
PB_OUT_CLOCK = %1 << 0 ; PB0: serial clock (output)
PB_OUT_CHIP_IN = %1 << 1 ; PB1: chip serial data in (output)
PB_IN_CHIP_OUT = %1 << 2 ; PB2: chip serial data out (input)
PB_OUT_NOT_CHIP_SELECT = %1 << 3 ; PB3: negated chip select (output)
PB_IN_ADDRESS_SIZE = %1 << 4 ; PB4: address size (input)
; PB5-PB7: unused on standard Cody cartridge
PB_IN_ALL = PB_IN_ADDRESS_SIZE | PB_IN_CHIP_OUT
PB_OUT_ALL = PB_OUT_NOT_CHIP_SELECT | PB_OUT_CHIP_IN | PB_OUT_CLOCK

screen_ram = $c400 ; Default base address of screen memory

; Zero page variables
* = 0

; BASIC program memory goes from $0200 up to $6500
; and is used roughly from the bottom up
; depending on the size of the currently loaded BASIC code.
; Thus, it's usually safe to put custom code/data here,
; as long as the BASIC program is not so large that it needs the entire program memory.
LOAD_POSITION = $6300
PERSISTENT_CODE_POSITION = $6400 ; decimal 25600
PERSISTENT_CODE_MAX = $6600

; Program header for Cody BASIC's loader (needs to be first).
* = 0
.word LOAD_POSITION ; Starting address
.word (LOAD_END - 1) ; Ending address

; Cody BASIC's loader will put the data at LOAD_POSITION.
.logical LOAD_POSITION
	ldx #0
_print_loop:
	lda BOOT_MESSAGE, x
	beq _print_done
	sta screen_ram, x
	inc x
	bra _print_loop
_print_done:
	
	; TODO Replace this with a robust loop based on the zero page variable JIFFIES
	lda #10
	ldx #0
	ldy #0
_idle_loop:
	inc y
	bne _idle_loop
	inc x
	bne _idle_loop
	dec a
	bne _idle_loop
	
	rts

BOOT_MESSAGE: .text format("SPI calls loaded. Call SYS %d etc.", JUMP_TABLE)

.cerror * > PERSISTENT_CODE_POSITION, format("Boot code too long: %#04x > %04x", *, PERSISTENT_CODE_POSITION)
* = PERSISTENT_CODE_POSITION

; Jump table header.
; Callers could use this for simple feature detection at runtime
; to check whether an entry actually exists before trying to use it.
JUMP_TABLE_HEADER:
	; First byte is rts so that nothing terrible happens if someone incorrectly tries to call the header.
	; This should also be considered a magic number/signature:
	; if the first byte is *not* rts,
	; then the header or the jump table doesn't have the format documented here.
	rts
	; Second byte is currently 0 and should be ignored for now.
	; It might be used in the future for extra metadata that is backwards-compatible
	; (i. e. that can be safely ignored by callers that don't expect or need it).
	.byte 0
	; Third byte is the number of jump table entries after this header.
	; This is a number of *entries*, not a number of bytes!
	.cerror (JUMP_TABLE_END - JUMP_TABLE) % 3 != 0, format("Jump table size must be a multiple of 3 bytes: %d %% 3 == %d", JUMP_TABLE_END - JUMP_TABLE, (JUMP_TABLE_END - JUMP_TABLE) % 3)
	.byte (JUMP_TABLE_END - JUMP_TABLE) / 3
	.cerror JUMP_TABLE - JUMP_TABLE_HEADER != 3, format("Jump table header must be exactly 3 bytes long, not %d bytes", JUMP_TABLE - JUMP_TABLE_HEADER)

; The actual jump table.
; A simple sequence of 3-byte entries.
JUMP_TABLE:
	jmp is_cartridge_present
	jmp set_up_expansion_port_for_cartridge
	jmp read_eeprom_address_size
	jmp end_spi_transaction
	jmp send_spi_byte
	jmp receive_spi_byte
JUMP_TABLE_END:

; Check whether the cartridge detect pins are connected or not.
; Loosely based on CARTCHECK from codybasic.asm.
; z flag: will be set iff no cartridge detected
; a: will be 0 iff no cartridge detected
; x: clobbered
; via_pcr: will be set to $00
; via_ifr: CA1/CA2 flags will be cleared
is_cartridge_present:
	; Cartridge detect works as follows:
	; CA2 is our output.
	; CA1 is our input,
	; pulled low through a resistor.
	; If the cartridge wishes to be detected,
	; it connects CA1 to CA2,
	; so that setting CA2 to high will also drive CA1 high.
	; If the cartridge does not wish to be detected or is not present,
	; setting CA2 high has no effect and CA1 will remain low.
	
	; Set CA1 to positive active edge input
	; and CA2 to low output.
	; (Don't care about CB1/CB2 here.)
	lda #((VIA_PCR_C2_OUT_LOW | VIA_PCR_C1_IN_POSITIVE_ACTIVE_EDGE) << VIA_PCR_CA_SHIFT)
	sta via_pcr
	
	; Read IRA to clear the CA1 interrupt flag
	; (and also CA2, though we don't care about that).
	lda via_iora
	
	; Pull CA2 output high.
	lda #((VIA_PCR_C2_OUT_HIGH | VIA_PCR_C1_IN_POSITIVE_ACTIVE_EDGE) << VIA_PCR_CA_SHIFT)
	sta via_pcr
	
	; Read interrupt flags (CA1 flag needed later).
	lda via_ifr
	
	; Clear the CA1 (and CA2) interrupt flag again.
	ldx via_iora
	
	; Reset PCR so CA2 stops outputting.
	stz via_pcr
	
	; Check whether the CA1 interrupt flag was set.
	and #VIA_IR_CA1
	
	rts

; Configure the VIA's port B
; (which is connected to the Cody Computer's expansion port)
; for communication with an SPI EEPROM on the cartridge.
; a: clobbered
; via_ddrb: configured/clobbered
set_up_expansion_port_for_cartridge:
	; Disable latching for IO port B.
	lda #VIA_ACR_PB_LATCH
	trb via_acr
	
	; Set input/output modes for port B.
	lda #PB_OUT_ALL
	sta via_ddrb
	
	; Intentionally continue into end_spi_transaction
	; to set all outputs to a known initial state.

; End any active SPI transaction by turning chip select off.
; Safe to call regardless of the current state of chip select.
; a: clobbered
end_spi_transaction:
	; Clock: low (don't really care, but is appropriate for start of next SPI transaction)
	; Chip data in: don't care
	; Negated chip select: high (off)
	lda #PB_OUT_NOT_CHIP_SELECT
	sta via_iorb
	
	rts

; z flag: matches a
; a: will be 0 iff addresses are 16-bit, not 0 iff addresses are 24-bit
read_eeprom_address_size:
	lda via_iorb
	and #PB_IN_ADDRESS_SIZE
	rts

; Send a byte to the SPI device.
; This also starts an SPI transaction if one isn't already in progress,
; i. e. ensures that chip select is on.
; a: byte to send (clobbered)
; x: clobbered
; y: clobbered
send_spi_byte:
	; Initialize loop counter.
	ldy #8
	
_loop:
	; Shift next bit to send from a into c flag.
	rol a
	; Save remaining bits into x,
	; because a will be clobbered in the next steps.
	tax
	
	; Prepare outputs:
	; Clock: low
	; Chip data in: bit to send
	; Negated chip select: low (on)
	bcs _prepare_send_1
	lda #0
	bra _prepared_send
_prepare_send_1:
	lda #PB_OUT_CHIP_IN
_prepared_send:
	
	; Set outputs.
	sta via_iorb
	
	; Pull clock high.
	ora #PB_OUT_CLOCK
	sta via_iorb
	
	; Retrieve remaining bits to send,
	; previously saved in x.
	txa
	
	; Loop until counter reaches 0.
	dec y
	bne _loop
	
	rts

; Receive a byte from the SPI device.
; This also starts an SPI transaction if one isn't already in progress,
; i. e. ensures that chip select is on.
; a: will contain the received byte
; x: clobbered
; y: clobbered
receive_spi_byte:
	; Initialize output byte.
	lda #0
	; Initialize loop counter.
	ldy #8
	
_loop:
	; Save already read bits into x,
	; because a will be clobbered in the next steps.
	tax
	
	; Prepare outputs:
	; Clock: low
	; Chip data in: don't care
	; Negated chip select: low (on)
	stz via_iorb
	
	; Pull clock high.
	lda #PB_OUT_CLOCK
	sta via_iorb
	
	; Read chip data out.
	lda #PB_IN_CHIP_OUT
	bit via_iorb
	bne _received_1
	
	; Received a 0 bit.
	txa
	clc
	bra _received_done
_received_1:
	; Received a 1 bit.
	txa
	sec
_received_done:
	; Shift received bit from c flag into a.
	rol a
	
	; Loop until counter reaches 0.
	dec y
	bne _loop
	
	rts

.cerror * > PERSISTENT_CODE_MAX, format("Persistent code too long: %04x > %04x", *, PERSISTENT_CODE_MAX)

LOAD_END:
.endlogical
